services:
  nginx:
    container_name: nginx-reverse-proxy
    image: nginx:latest
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - type: bind
        source: ${PWD}/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - chat-network

  frontend:
    container_name: nextjs-frontend
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_NGINX_ENV=${NGINX_ENV}
        - NEXT_PUBLIC_NGINX_HOST=${NGINX_HOST}
        - NEXT_PUBLIC_NGINX_PORT=${NGINX_PORT}
    env_file:
      - .env
    ports:
      - "${NEXTJS_PORT}:3000"
    networks:
      - chat-network

  app1:
    container_name: app1
    build: .
    env_file:
      - .env
    environment:
      - SERVER_NAME=Asia
    networks:
      - chat-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  app2:
    container_name: app2
    build: .
    env_file:
      - .env
    environment:
      - SERVER_NAME=Middle-east
    networks:
      - chat-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  app3:
    container_name: app3
    build: .
    env_file:
      - .env
    environment:
      - SERVER_NAME=Europe
    networks:
      - chat-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  postgres:
    container_name: postgres
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chat-network

  redis:
    container_name: redis
    image: redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - chat-network

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - chat-network

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - chat-network

  kafka-consumer:
    container_name: kafka-consumer
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
    networks:
      - chat-network

volumes:
  ollama_data:
  postgres_data:

networks:
  chat-network:
    driver: bridge
